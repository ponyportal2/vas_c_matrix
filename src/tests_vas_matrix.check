#include "vas_matrix.h"

#define SUCCESS 1
#define FAILURE 0

#test vas_create_matrix_1
matrix_t A = {0};
vas_create_matrix(3, 3, &A);
ck_assert_ptr_ne(A.matrix, NULL);
ck_assert_ptr_ne(A.matrix[0], NULL);
ck_assert_ptr_ne(A.matrix[1], NULL);
ck_assert_ptr_ne(A.matrix[2], NULL);
vas_remove_matrix(&A);

#test vas_create_matrix_2
matrix_t A = {0};
ck_assert_int_eq(1, vas_create_matrix(-3, 3, &A));

#test vas_eq_matrix_1
double a_0[] = {0, 1};
double a_1[] = {2, 3};
double *a_[] = {&a_0[0], &a_1[0]};
matrix_t a = {.rows = 2, .columns = 2, .matrix = &a_[0]};
double b_0[] = {0, 1};
double b_1[] = {2, 3};
double *b_[] = {&b_0[0], &b_1[0]};
matrix_t b = {.rows = 2, .columns = 2, .matrix = &b_[0]};
ck_assert_int_eq(1, vas_eq_matrix(&a, &b));

#test vas_eq_matrix_2
double a_0[] = {0, 1};
double a_1[] = {2, 3};
double a_2[] = {2, 3};
double *a_[] = {&a_0[0], &a_1[0], &a_2[0]};
matrix_t a = {.rows = 2, .columns = 3, .matrix = &a_[0]};
double b_0[] = {0, 1};
double b_1[] = {2, 3};
double *b_[] = {&b_0[0], &b_1[0]};
matrix_t b = {.rows = 2, .columns = 2, .matrix = &b_[0]};
ck_assert_int_eq(0, vas_eq_matrix(&a, &b));

#test vas_eq_matrix_3
double a_0[] = {0, 1};
double a_1[] = {3, 3};
double *a_[] = {&a_0[0], &a_1[0]};
matrix_t a = {.rows = 2, .columns = 2, .matrix = &a_[0]};
double b_0[] = {0, 1};
double b_1[] = {2, 3};
double *b_[] = {&b_0[0], &b_1[0]};
matrix_t b = {.rows = 2, .columns = 2, .matrix = &b_[0]};
ck_assert_int_eq(0, vas_eq_matrix(&a, &b));

#test vas_sum_matrix_1
double a_0[] = {1, 2, 3};
double a_1[] = {0, 4, 5};
double a_2[] = {0, 0, 6};
double *a_[] = {&a_0[0], &a_1[0], &a_2[0]};
matrix_t a = {.rows = 3, .columns = 3, .matrix = &a_[0]};
double b_0[] = {1, 0, 0};
double b_1[] = {2, 0, 0};
double b_2[] = {3, 4, 1};
double *b_[] = {&b_0[0], &b_1[0], &b_2[0]};
matrix_t b = {.rows = 3, .columns = 3, .matrix = &b_[0]};
matrix_t result = {0};
vas_sum_matrix(&a, &b, &result);
double best_0[] = {2, 2, 3};
double best_1[] = {2, 4, 5};
double best_2[] = {3, 4, 7};
double *best_[] = {&best_0[0], &best_1[0], &best_2[0]};
matrix_t best = {.rows = 3, .columns = 3, .matrix = &best_[0]};
ck_assert_int_eq(1, vas_eq_matrix(&result, &best));
vas_remove_matrix(&result);

#test vas_sum_matrix_2
double a_0[] = {1, 2, 3};
double a_1[] = {9, 4, 5};
double a_2[] = {0, 0, 6};
double *a_[] = {&a_0[0], &a_1[0], &a_2[0]};
matrix_t a = {.rows = 3, .columns = 3, .matrix = &a_[0]};
double b_0[] = {1, 0, 0};
double b_1[] = {2, 0, 0};
double b_2[] = {3, 4, 1};
double *b_[] = {&b_0[0], &b_1[0], &b_2[0]};
matrix_t b = {.rows = 3, .columns = 3, .matrix = &b_[0]};
matrix_t result = {0};
vas_sum_matrix(&a, &b, &result);
double best_0[] = {2, 2, 3};
double best_1[] = {2, 4, 5};
double best_2[] = {3, 4, 7};
double *best_[] = {&best_0[0], &best_1[0], &best_2[0]};
matrix_t best = {.rows = 3, .columns = 3, .matrix = &best_[0]};
ck_assert_int_eq(0, vas_eq_matrix(&result, &best));
vas_remove_matrix(&result);

#test vas_sum_matrix_3
double a_0[] = {1, 2, 3};
double a_1[] = {0, 4, 5};
double *a_[] = {&a_0[0], &a_1[0]};
matrix_t a = {.rows = 2, .columns = 3, .matrix = &a_[0]};
double b_0[] = {1, 0, 0};
double b_1[] = {2, 0, 0};
double b_2[] = {3, 4, 1};
double *b_[] = {&b_0[0], &b_1[0], &b_2[0]};
matrix_t b = {.rows = 3, .columns = 3, .matrix = &b_[0]};
matrix_t result = {0};
ck_assert_int_eq(2, vas_sum_matrix(&a, &b, &result));

#test vas_sub_matrix_1
double a_0[] = {1, 2, 3};
double a_1[] = {0, 4, 5};
double a_2[] = {0, 0, 6};
double *a_[] = {&a_0[0], &a_1[0], &a_2[0]};
matrix_t a = {.rows = 3, .columns = 3, .matrix = &a_[0]};
double b_0[] = {1, 0, 0};
double b_1[] = {2, 0, 0};
double b_2[] = {3, 4, 1};
double *b_[] = {&b_0[0], &b_1[0], &b_2[0]};
matrix_t b = {.rows = 3, .columns = 3, .matrix = &b_[0]};
matrix_t result = {0};
ck_assert_int_eq(0, vas_sub_matrix(&a, &b, &result));
double best_0[] = {0, 2, 3};
double best_1[] = {-2, 4, 5};
double best_2[] = {-3, -4, 5};
double *best_[] = {&best_0[0], &best_1[0], &best_2[0]};
matrix_t best = {.rows = 3, .columns = 3, .matrix = &best_[0]};
ck_assert_int_eq(1, vas_eq_matrix(&result, &best));
vas_remove_matrix(&result);

#test vas_sub_matrix_2
double a_0[] = {1, 2, 3};
double a_1[] = {0, 4, 5};
double a_2[] = {0, 0, 6};
double *a_[] = {&a_0[0], &a_1[0], &a_2[0]};
matrix_t a = {.rows = 3, .columns = 3, .matrix = &a_[0]};
double b_0[] = {1, 0, 0};
double b_1[] = {2, 0, 0};
double b_2[] = {3, 4, 1};
double *b_[] = {&b_0[0], &b_1[0], &b_2[0]};
matrix_t b = {.rows = 3, .columns = 3, .matrix = &b_[0]};
matrix_t result = {0};
ck_assert_int_eq(0, vas_sub_matrix(&a, &b, &result));
double best_0[] = {2, 2, 3};
double best_1[] = {2, 4, 5};
double best_2[] = {3, 4, 7};
double *best_[] = {&best_0[0], &best_1[0], &best_2[0]};
matrix_t best = {.rows = 3, .columns = 3, .matrix = &best_[0]};
ck_assert_int_eq(0, vas_eq_matrix(&result, &best));
vas_remove_matrix(&result);

#test vas_sub_matrix_3
double a_0[] = {1, 2, 3};
double a_1[] = {0, 4, 5};
double *a_[] = {&a_0[0], &a_1[0]};
matrix_t a = {.rows = 2, .columns = 3, .matrix = &a_[0]};
double b_0[] = {1, 0, 0};
double b_1[] = {2, 0, 0};
double b_2[] = {3, 4, 1};
double *b_[] = {&b_0[0], &b_1[0], &b_2[0]};
matrix_t b = {.rows = 3, .columns = 3, .matrix = &b_[0]};
matrix_t result = {0};
ck_assert_int_eq(2, vas_sub_matrix(&a, &b, &result));
vas_remove_matrix(&result);

#test vas_mult_number_1
double a_0[] = {1, 2, 3};
double a_1[] = {0, 4, 2};
double a_2[] = {2, 3, 4};
double *a_[] = {&a_0[0], &a_1[0], &a_2[0]};
matrix_t a = {.rows = 3, .columns = 3, .matrix = &a_[0]};
double number = 2;
matrix_t result = {0};
vas_mult_number(&a, number, &result);
double best_0[] = {2, 4, 6};
double best_1[] = {0, 8, 4};
double best_2[] = {4, 6, 8};
double *best_[] = {&best_0[0], &best_1[0], &best_2[0]};
matrix_t best = {.rows = 3, .columns = 3, .matrix = &best_[0]};
ck_assert_int_eq(1, vas_eq_matrix(&result, &best));
vas_remove_matrix(&result);

#test vas_mult_number_2
double a_0[] = {1, 2, 3};
double a_1[] = {0, 4, 2};
double a_2[] = {2, 3, 4};
double *a_[] = {&a_0[0], &a_1[0], &a_2[0]};
matrix_t a = {.rows = 3, .columns = 3, .matrix = &a_[0]};
double number = 3;
matrix_t result = {0};
vas_mult_number(&a, number, &result);
double best_0[] = {2, 4, 6};
double best_1[] = {0, 8, 4};
double best_2[] = {4, 6, 8};
double *best_[] = {&best_0[0], &best_1[0], &best_2[0]};
matrix_t best = {.rows = 3, .columns = 3, .matrix = &best_[0]};
ck_assert_int_eq(0, vas_eq_matrix(&result, &best));
vas_remove_matrix(&result);

#test vas_mult_matrix_1
double a_0[] = {1, 4};
double a_1[] = {2, 5};
double a_2[] = {3, 6};
double *a_[] = {&a_0[0], &a_1[0], &a_2[0]};
matrix_t a = {.rows = 3, .columns = 2, .matrix = &a_[0]};
double b_0[] = {1, -1, 1};
double b_1[] = {2, 3, 4};
double *b_[] = {&b_0[0], &b_1[0]};
matrix_t b = {.rows = 2, .columns = 3, .matrix = &b_[0]};
matrix_t result = {0};
vas_mult_matrix(&a, &b, &result);
double best_0[] = {9, 11, 17};
double best_1[] = {12, 13, 22};
double best_2[] = {15, 15, 27};
double *best_[] = {&best_0[0], &best_1[0], &best_2[0]};
matrix_t best = {.rows = 3, .columns = 3, .matrix = &best_[0]};
ck_assert_int_eq(1, vas_eq_matrix(&result, &best));
vas_remove_matrix(&result);

#test vas_mult_matrix_2
double a_0[] = {1, 4};
double a_1[] = {2, 5};
double a_2[] = {6, 6};
double *a_[] = {&a_0[0], &a_1[0], &a_2[0]};
matrix_t a = {.rows = 3, .columns = 2, .matrix = &a_[0]};
double b_0[] = {1, -1, 1};
double b_1[] = {2, 3, 4};
double *b_[] = {&b_0[0], &b_1[0]};
matrix_t b = {.rows = 2, .columns = 3, .matrix = &b_[0]};
matrix_t result = {0};
vas_mult_matrix(&a, &b, &result);
double best_0[] = {9, 11, 17};
double best_1[] = {12, 13, 22};
double best_2[] = {15, 15, 27};
double *best_[] = {&best_0[0], &best_1[0], &best_2[0]};
matrix_t best = {.rows = 3, .columns = 3, .matrix = &best_[0]};
ck_assert_int_eq(0, vas_eq_matrix(&result, &best));
vas_remove_matrix(&result);

#test vas_mult_matrix_3
double a_0[] = {1, 4};
double a_1[] = {2, 5};
double *a_[] = {&a_0[0], &a_1[0]};
matrix_t a = {.rows = 2, .columns = 2, .matrix = &a_[0]};
double b_0[] = {1, -1};
double b_1[] = {2, 3};
double b_2[] = {2, 3};
double *b_[] = {&b_0[0], &b_1[0], &b_2[0]};
matrix_t b = {.rows = 3, .columns = 2, .matrix = &b_[0]};
matrix_t result = {0};
ck_assert_int_eq(2, vas_mult_matrix(&a, &b, &result));

#test vas_transpose_1
double a_0[] = {1, 4};
double a_1[] = {2, 5};
double a_2[] = {3, 6};
double *a_[] = {&a_0[0], &a_1[0], &a_2[0]};
matrix_t a = {.rows = 3, .columns = 2, .matrix = &a_[0]};
matrix_t result = {0};
ck_assert_int_eq(0, vas_transpose(&a, &result));
double best_0[] = {1, 2, 3};
double best_1[] = {4, 5, 6};
double *best_[] = {&best_0[0], &best_1[0]};
matrix_t best = {.rows = 2, .columns = 3, .matrix = &best_[0]};
ck_assert_int_eq(1, vas_eq_matrix(&result, &best));
vas_remove_matrix(&result);

#test vas_calc_complements_1
double a_0[] = {1, 2, 3};
double a_1[] = {0, 4, 2};
double a_2[] = {5, 2, 1};
double *a_[] = {&a_0[0], &a_1[0], &a_2[0]};
matrix_t a = {.rows = 3, .columns = 3, .matrix = &a_[0]};
matrix_t result = {0};
ck_assert_int_eq(0, vas_calc_complements(&a, &result));
double best_0[] = {0, 10, -20};
double best_1[] = {4, -14, 8};
double best_2[] = {-8, -2, 4};
double *best_[] = {&best_0[0], &best_1[0], &best_2[0]};
matrix_t best = {.rows = 3, .columns = 3, .matrix = &best_[0]};
ck_assert_int_eq(1, vas_eq_matrix(&result, &best));
vas_remove_matrix(&result);

#test vas_calc_complements_2
double a_0[] = {2, 5, 7};
double a_1[] = {6, 3, 4};
double a_2[] = {5, -2, -3};
double *a_[] = {&a_0[0], &a_1[0], &a_2[0]};
matrix_t a = {.rows = 3, .columns = 3, .matrix = &a_[0]};
matrix_t result = {0};
ck_assert_int_eq(0, vas_calc_complements(&a, &result));
double best_0[] = {-1, 38, -27};
double best_1[] = {1, -41, 29};
double best_2[] = {-1, 34, -24};
double *best_[] = {&best_0[0], &best_1[0], &best_2[0]};
matrix_t best = {.rows = 3, .columns = 3, .matrix = &best_[0]};
ck_assert_int_eq(1, vas_eq_matrix(&result, &best));
vas_remove_matrix(&result);

#test vas_complements_matrix_1
double a_0[] = {2, 5, 7};
double a_1[] = {6, 3, 4};
double a_2[] = {5, -2, -3};
double *a_[] = {&a_0[0], &a_1[0], &a_2[0]};
matrix_t a = {.rows = 3, .columns = 3, .matrix = &a_[0]};
matrix_t result = {0};
ck_assert_int_eq(0, vas_calc_complements(&a, &result));
double best_0[] = {-1, 38, -27};
double best_1[] = {1, -41, 29};
double best_2[] = {-1, 34, -24};
double *best_[] = {&best_0[0], &best_1[0], &best_2[0]};
matrix_t best = {.rows = 3, .columns = 3, .matrix = &best_[0]};
ck_assert_int_eq(1, vas_eq_matrix(&result, &best));
vas_remove_matrix(&result);

#test vas_determinant_1
double a_0[] = {1, 2, 3};
double a_1[] = {4, 5, 6};
double a_2[] = {7, 8, 9};
double *a_[] = {&a_0[0], &a_1[0], &a_2[0]};
matrix_t a = {.rows = 3, .columns = 3, .matrix = &a_[0]};
double result;
ck_assert_int_eq(0, vas_determinant(&a, &result));
double best = 0.0;
ck_assert_double_eq(best, result);

#test vas_determinant_2
double a_0[] = {2, 5, 7};
double a_1[] = {6, 3, 4};
double a_2[] = {5, -2, -3};
double *a_[] = {&a_0[0], &a_1[0], &a_2[0]};
matrix_t a = {.rows = 3, .columns = 3, .matrix = &a_[0]};
double result;
ck_assert_int_eq(0, vas_determinant(&a, &result));
double best = -1.0;
ck_assert_double_eq(best, result);

#test vas_determinant_3
double a_0[] = {2, 5, 7, 8};
double a_1[] = {6, 3, -4, 5};
double a_2[] = {5, -2, -3, 2};
double a_3[] = {5, -2, -3, -4};
double *a_[] = {&a_0[0], &a_1[0], &a_2[0], &a_3[0]};
matrix_t a = {.rows = 4, .columns = 4, .matrix = &a_[0]};
double result;
ck_assert_int_eq(0, vas_determinant(&a, &result));
double best = 1398;
ck_assert_double_eq(best, result);

#test vas_inverse_matrix_1
double a_0[] = {2, 5, 7};
double a_1[] = {6, 3, 4};
double a_2[] = {5, -2, -3};
double *a_[] = {&a_0[0], &a_1[0], &a_2[0]};
matrix_t a = {.rows = 3, .columns = 3, .matrix = &a_[0]};
matrix_t result = {0};
ck_assert_int_eq(0, vas_inverse_matrix(&a, &result));
double best_0[] = {1, -1, 1};
double best_1[] = {-38, 41, -34};
double best_2[] = {27, -29, 24};
double *best_[] = {&best_0[0], &best_1[0], &best_2[0]};
matrix_t best = {.rows = 3, .columns = 3, .matrix = &best_[0]};
ck_assert_int_eq(1, vas_eq_matrix(&result, &best));
vas_remove_matrix(&result);
